{
  "name": "pg-transaction",
  "version": "1.0.2",
  "description": "simplify executing transactions with node-postgres",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "peerDependencies": {
    "pg": "2.x"
  },
  "devDependencies": {
    "pg": "2.x",
    "mocha": "1.7.x",
    "should": "1.2.x",
    "async": "0.1.x"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/goodybag/node-pg-transaction.git"
  },
  "keywords": [
    "postgres",
    "postgresql",
    "postgre",
    "node-postgres",
    "transactions",
    "transaction"
  ],
  "author": {
    "name": "Lalit Kapoor",
    "email": "lalit@goodybag.com"
  },
  "license": "MIT",
  "readme": "[![Build Status](https://travis-ci.org/goodybag/node-pg-transaction.png)](https://travis-ci.org/goodybag/node-pg-transaction)\n[![Dependency Status](https://gemnasium.com/goodybag/node-pg-transaction.png)](https://gemnasium.com/goodybag/node-pg-transaction)\n\nMake it easier to write transactions for PostgreSQL using [node-postgres](https://github.com/brianc/node-postgres).\n\nThe callback and event emitter styles both work.  \n**Note:** if you use a callback, then the error event won't be emitted. This is consistent with node-postgres.\n\n##Installation:\n\nTo install the most recent release from npm, run:\n\n```\nnpm install pg-transaction\n```\n\n## Methods:\n\n```javascript\nbegin([callback]);\nquery(); // This is pg.Client.query from node-postgres. There are various possible arguments look at its documentation\nsavepoint(savepoint, [callback]);\nrelease(savepoint, [callback]);\nrollback([savepoint], [callback]);\ncommit([callback]);\nabort([callback]);\n```\n\n## Events:\n\n- error\n\n## Example:\n\n```javascript\n\n/**\n * Module dependencies\n */\n\nvar\n  // PostgreSQL modules\n  pg = require('pg')\n, Transaction = require('pg-transaction')\n\n  // Configuration stuff\n, connectionString = process.env['PG_CON'] || ''\n;\n\nvar die = function(err){\n  if (err) throw err;\n};\n\nvar client = new pg.Client(connectionString);\nclient.connect();\n\nclient.query(\"CREATE TEMP TABLE beatles(name varchar(10), height integer, birthday timestamptz)\");\n\nvar tx = new Transaction(client);\ntx.on('error', die);\n\ntx.begin();\ntx.query(\"INSERT INTO beatles(name, height, birthday) values($1, $2, $3)\", ['Ringo', 67, new Date(1945, 11, 2)]);\ntx.savepoint('savepoint1');\ntx.query(\"INSERT INTO beatles(name, height, birthday) values($1, $2, $3)\", ['John', 68, new Date(1944, 10, 13)]);\ntx.rollback('savepoint1'); // all statements after savepoint1 are undone (John will not be inserted)\ntx.release('savepoint1'); // can no longer use savepoint1 as a point to rollback to\ntx.commit();\n\nclient.query(\"SELECT COUNT(*) AS count FROM beatles\", function(err, result){\n  if (err) return die(err);\n  console.log(result.rows[0].count); // 1\n  client.end();\n});\n```\n\n## Contributors:\n\n- [Lalit Kapoor](https://github.com/lalitkapoor)\n\n### Special thanks to the following:\n\n- [Brian M. Carlson](https://github.com/brianc)\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/goodybag/node-pg-transaction/issues"
  },
  "_id": "pg-transaction@1.0.2",
  "dist": {
    "shasum": "ef3f23959d9480456b7e4e82d42095d3602ce6a8"
  },
  "_from": "pg-transaction@~1.0.1",
  "_resolved": "https://registry.npmjs.org/pg-transaction/-/pg-transaction-1.0.2.tgz"
}
